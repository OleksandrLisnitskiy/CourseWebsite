name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_test:
    runs-on: ubuntu-latest

<<<<<<< HEAD
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin  # Set your password here
          POSTGRES_DB: CourseWebsite  # Set your database name here
        ports:
          - 5433:5432  # Expose PostgreSQL port
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-timeout=30s
          --health-retries=5
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
=======
>>>>>>> f450606 (feat(services): Tests for services model)
    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13.7'  # You can change to the version you're using

      # Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

<<<<<<< HEAD

      - name: Run migrations
        run: |
          python manage.py migrate

=======
>>>>>>> f450606 (feat(services): Tests for services model)
      # Run tests (ensure you have test cases configured in your Django project)
      - name: Run tests
        run: |
          python manage.py test  # Running Django tests

      # Optional: Run linters (like flake8 or pylint)
<<<<<<< HEAD
#      - name: Run linter (flake8 example)
#        run: |
#          pip install flake8
#          flake8 .  # Check your Python files for linting issues
=======
      - name: Run linter (flake8 example)
        run: |
          pip install flake8
          flake8 .  # Check your Python files for linting issues
>>>>>>> f450606 (feat(services): Tests for services model)

      # Optional: Check for code formatting (black example)
      - name: Check code formatting (black example)
        run: |
          pip install black
          black --check .  # Will fail if code isn't formatted properly
